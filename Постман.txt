http://162.55.220.72:5005/first
1. Отправить запрос.
2. Статус код 200
3. Проверить, что в body приходит правильный string.

http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Проверить, что name в ответе равно name s request (name вбить руками.)
5. Проверить, что age в ответе равно age s request (age вбить руками.)
6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
7. Спарсить request.
8. Проверить, что name в ответе равно name s request (name забрать из request.)
9. Проверить, что age в ответе равно age s request (age забрать из request.)
10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
11. Вывести в консоль параметр family из response.
12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)


let req_f = request.data
let resp_f = pm.response.json();

let req_name = req_f.name
let resp_name = resp_f.name

let req_salary = +req_f.salary
let resp_salary = +resp_f.salary


let req_age = +req_f.age
let resp_age = +resp_f.age

let family = resp_f.family

let resp_salary_1_5_years = resp_f.family.u_salary_1_5_year


console.log(resp_f.family)



pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Check_name", function () {
    pm.expect(req_name).to.eql("Dasha");
});

pm.test("Check_salary", function () {
    pm.expect(req_salary).to.eql(20000);
});

pm.test("Check_Age", function () {
    pm.expect(req_age).to.eql(33);
});

pm.test("Check_name", function () {
    pm.expect(req_name).to.eql(resp_name);
});

pm.test("Check_Age", function () {
    pm.expect(req_age).to.eql(resp_age);
});

pm.test("Check_salary", function () {
    pm.expect(req_salary).to.eql(resp_salary);
});

pm.test("Check_salary_1_5_year", function () {
    pm.expect(req_salary*4).to.eql(resp_salary_1_5_years);
});


http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age s request (age забрать из request.)
7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
8. Вывести в консоль параметр family из response.
9. Проверить, что у параметра dog есть параметры name.
10. Проверить, что у параметра dog есть параметры age.
11. Проверить, что параметр name имеет значение Luky.
12. Проверить, что параметр age имеет значение 4.

let req_f = pm.request.url.query.toObject() 
let resp_f = pm.response.json();

let req_name = req_f.name
let resp_name = resp_f.name

let req_age = + req_f.age
let resp_age = + resp_f.age

let req_salary = +req_f.salary
let resp_salary = +resp_f.salary

let family = resp_f.family


console.log(resp_f.family)

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Check_name", function () {
    pm.expect(req_name).to.eql(resp_name);
});


pm.test("Check_age", function () {
    pm.expect(req_age).to.eql(resp_age);
});

pm.test("Check_salary", function () {
    pm.expect(req_salary).to.eql(resp_salary);
});

pm.test("Dog has age", function () {
    pm.expect(resp_f.family.pets.dog).to.have.property("age");
});

pm.test("Dog has name", function () {
    pm.expect(resp_f.family.pets.dog).to.have.property("name");
});

pm.test("Dog is Luky", function () {
    pm.expect(family.pets.dog.name).to.eql("Luky");
});

pm.test("Dog is 4", function () {
    pm.expect(family.pets.dog.age).to.eql(4);
});


http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age из request (age забрать из request.)
7. Вывести в консоль параметр salary из request.
8. Вывести в консоль параметр salary из response.
9. Вывести в консоль 0-й элемент параметра salary из response.
10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
15. Создать в окружении переменную name
16. Создать в окружении переменную age
17. Создать в окружении переменную salary
18. Передать в окружение переменную name
19. Передать в окружение переменную age
20. Передать в окружение переменную salary
21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.

let req_f = pm.request.url.query.toObject() 
let resp_f = pm.response.json();

let req_name = req_f.name
let resp_name = resp_f.name

let req_age = + req_f.age
let resp_age = + resp_f.age

let req_salary = +req_f.salary
let resp_salary = +resp_f.salary

console.log("req_f.salary = " + req_f.salary)
console.log("resp_f.salary = " + resp_f.salary)
console.log("resp_f.salary[0] = " + resp_f.salary[0])
console.log("resp_f.salary[1] = " + resp_f.salary[1])
console.log("resp_f.salary[2] = " + resp_f.salary[2])

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Check_name", function () {
    pm.expect(req_name).to.eql(resp_name);
});

pm.test("Check_age", function () {
    pm.expect(req_age).to.eql(resp_age);
});

pm.test("Check_salary_1", function () {
    pm.expect(req_salary).to.eql(resp_f.salary[0]);
});

pm.test("Check_salary_2", function () {
    pm.expect(req_salary*2).to.eql(+resp_f.salary[1]);
});

pm.test("Check_salary_3", function () {
    pm.expect(req_salary*3).to.eql(+resp_f.salary[2]);
});

pm.environment.set("name" , "Tina")

pm.environment.set("salary", 25000);

pm.environment.set("age", 33);

отправить 2 запроса 

цикл: 


http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
2. Вставить параметр age из окружения в age
3. Вставить параметр name из окружения в name
4. Отправить запрос.
5. Статус код 200
6. Спарсить response body в json.
7. Спарсить request.
8. Проверить, что json response имеет параметр start_qa_salary
9. Проверить, что json response имеет параметр qa_salary_after_6_months
10. Проверить, что json response имеет параметр qa_salary_after_12_months
11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
13. Проверить, что json response имеет параметр person
14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.


let req_f = request.data
let resp_f = pm.response.json();

let req_salary = +req_f.salary
let resp_salary = +resp_f.salary

let req_age = +req_f.age
let resp_age = +resp_f.age




pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Json has start salary", function () {
    pm.expect(pm.response.json()).to.have.property("start_qa_salary");
});

pm.test("Json has salary_after_6_months", function () {
    pm.expect(pm.response.json()).to.have.property("qa_salary_after_6_months");
});

pm.test("Json has salary_after_12_months", function () {
    pm.expect(pm.response.json()).to.have.property("qa_salary_after_12_months");
});

pm.test("Json has salary_after_1.5_year", function () {
    pm.expect(pm.response.json()).to.have.property("qa_salary_after_1.5_year");
});

pm.test("Json has salary_after_3.5_years", function () {
    pm.expect(pm.response.json()).to.have.property("qa_salary_after_3.5_years");
});

pm.test("Json has person", function () {
    pm.expect(pm.response.json()).to.have.property("person");
});

pm.test("Check_start salary", function () {
    pm.expect(+req_f.salary).to.eql(resp_f.start_qa_salary);
});

pm.test("Check salary after_6_months", function () {
    pm.expect(+req_f.salary*2
).to.eql(resp_f.qa_salary_after_6_months);
});


pm.test("Check salary after_12_months", function () {
    pm.expect(+req_f.salary*2.7
).to.eql(resp_f.qa_salary_after_12_months);
});


pm.test("Check salary after_3.5_years", function () {
pm.expect(req_salary*3.8).to.eql(resp_f["qa_salary_after_3.5_years"]); 
});

pm.test("Check salary after_1.5_years", function () {
pm.expect(req_salary*3.3).to.eql(resp_f["qa_salary_after_1.5_year"]); 
});


pm.test("Person", function () {
    pm.expect(req_salary).to.eql(resp_f.person.u_name[1]);
});

pm.test("Age", function () {
    pm.expect(req_age).to.eql(resp_f.person.u_age);
});

pm.test("Check salary 5_years", function () {
pm.expect(req_salary*4.2).to.eql(resp_f.person.u_salary_5_years); 
});

